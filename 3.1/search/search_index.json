{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Auto Depreciation Plugin \u00b6 Auto depreciation is a beancount plugin to deal with fixed assets depreciation. In our daily life, we may buy some valuable goods like cars, phones, furniture, etc. All these transactions are preferred to be documented as transfer instead of expenses, otherwise, you cannot evaluate your daily expenses properly. This plugin can generate depreciation transactions automatically. Installing \u00b6 pip install auto-depreciation Configuration \u00b6 The parameters passed to the plugin are: assets : Fixed assets account. expenses : Depreciation expenses account. method : Depreciation method. Parameter default values are as follows: plugin \"auto_depreciation.depreciation\" \"{ 'assets':'Assets:Wealth:Fixed-Assets', 'expenses':'Expenses:Property-Expenses:Depreciation', 'method':'parabola', }\" Usage \u00b6 Xiaoming is a young man. One day he bought a car and paid in cash. We assume that the original value of that car is 100,000 CNY and it will scrap after 10 years. The residual value is still 1,000 CNY. He can use this plugin like this: Example plugin \"auto_depreciation.depreciation\" 2020-03-01 commodity CARS name: \"cars\" assets-class: \"fixed assets\" 2020-03-31 * \"\" Assets:Cash -100000.00 CNY Assets:Wealth:Fixed-Assets 1 CARS {100000.00 CNY, \"BMW\"} useful_life: \"10y\" residual_value: 1000 where we use metadata attached in the posting to pass residual value and useful life to plugin. useful_life is the compulsory item and y represent years while m represent months . residual_value is optional and by default 0. Note residual_value is rounded to 2 decimal places. Example 2020-03-31 * \"Example\" Assets:Cash -600.00 CNY Assets:Wealth:Fixed-Assets 1 LENS {600.00 CNY, \"Nikon\"} useful_life: \"3m\" residual_value: 200 The code above is equal to 2020-03-31 * \"Example\" Assets:Cash -600.00 CNY Assets:Wealth:Fixed-Assets 1 LENS {600.00 CNY, 2020-03-31, \"Nikon\"} useful_life: \"3m\" residual_value: 200 2020-04-30 * \"Example-auto_depreciation:Nikon\" Assets:Wealth:Fixed-Assets -1 LENS {600.00 CNY, 2020-03-31, \"Nikon\"} Assets:Wealth:Fixed-Assets 1 LENS {379.74 CNY, 2020-04-30, \"Nikon\"} Expenses:Property-Expenses:Depreciation 220.26 CNY 2020-05-31 * \"Example-auto_depreciation:Nikon\" Assets:Wealth:Fixed-Assets -1 LENS {379.74 CNY, 2020-04-30, \"Nikon\"} Assets:Wealth:Fixed-Assets 1 LENS {243.47 CNY, 2020-05-31, \"Nikon\"} Expenses:Property-Expenses:Depreciation 136.27 CNY 2020-06-30 * \"Example-auto_depreciation:Nikon\" Assets:Wealth:Fixed-Assets -1 LENS {243.47 CNY, 2020-05-31, \"Nikon\"} Assets:Wealth:Fixed-Assets 1 LENS {200 CNY, 2020-06-30, \"Nikon\"} Expenses:Property-Expenses:Depreciation 43.47 CNY If the amount of fixed assets is greater than 1, all will be depreciated like this: Example 2020-03-31 * \"Example\" Assets:Cash -1200.00 CNY Assets:Wealth:Fixed-Assets 2 LENS {600.00 CNY, 2020-03-31, \"Nikon\"} useful_life: \"3m\" residual_value: 200 2020-04-30 * \"Example-auto_depreciation:Nikon\" Assets:Wealth:Fixed-Assets -2 LENS {600.00 CNY, 2020-03-31, \"Nikon\"} Assets:Wealth:Fixed-Assets 2 LENS {379.74 CNY, 2020-04-30, \"Nikon\"} Expenses:Property-Expenses:Depreciation 440.52 CNY ...","title":"Home"},{"location":"#auto-depreciation-plugin","text":"Auto depreciation is a beancount plugin to deal with fixed assets depreciation. In our daily life, we may buy some valuable goods like cars, phones, furniture, etc. All these transactions are preferred to be documented as transfer instead of expenses, otherwise, you cannot evaluate your daily expenses properly. This plugin can generate depreciation transactions automatically.","title":"Auto Depreciation Plugin"},{"location":"#installing","text":"pip install auto-depreciation","title":"Installing"},{"location":"#configuration","text":"The parameters passed to the plugin are: assets : Fixed assets account. expenses : Depreciation expenses account. method : Depreciation method. Parameter default values are as follows: plugin \"auto_depreciation.depreciation\" \"{ 'assets':'Assets:Wealth:Fixed-Assets', 'expenses':'Expenses:Property-Expenses:Depreciation', 'method':'parabola', }\"","title":"Configuration"},{"location":"#usage","text":"Xiaoming is a young man. One day he bought a car and paid in cash. We assume that the original value of that car is 100,000 CNY and it will scrap after 10 years. The residual value is still 1,000 CNY. He can use this plugin like this: Example plugin \"auto_depreciation.depreciation\" 2020-03-01 commodity CARS name: \"cars\" assets-class: \"fixed assets\" 2020-03-31 * \"\" Assets:Cash -100000.00 CNY Assets:Wealth:Fixed-Assets 1 CARS {100000.00 CNY, \"BMW\"} useful_life: \"10y\" residual_value: 1000 where we use metadata attached in the posting to pass residual value and useful life to plugin. useful_life is the compulsory item and y represent years while m represent months . residual_value is optional and by default 0. Note residual_value is rounded to 2 decimal places. Example 2020-03-31 * \"Example\" Assets:Cash -600.00 CNY Assets:Wealth:Fixed-Assets 1 LENS {600.00 CNY, \"Nikon\"} useful_life: \"3m\" residual_value: 200 The code above is equal to 2020-03-31 * \"Example\" Assets:Cash -600.00 CNY Assets:Wealth:Fixed-Assets 1 LENS {600.00 CNY, 2020-03-31, \"Nikon\"} useful_life: \"3m\" residual_value: 200 2020-04-30 * \"Example-auto_depreciation:Nikon\" Assets:Wealth:Fixed-Assets -1 LENS {600.00 CNY, 2020-03-31, \"Nikon\"} Assets:Wealth:Fixed-Assets 1 LENS {379.74 CNY, 2020-04-30, \"Nikon\"} Expenses:Property-Expenses:Depreciation 220.26 CNY 2020-05-31 * \"Example-auto_depreciation:Nikon\" Assets:Wealth:Fixed-Assets -1 LENS {379.74 CNY, 2020-04-30, \"Nikon\"} Assets:Wealth:Fixed-Assets 1 LENS {243.47 CNY, 2020-05-31, \"Nikon\"} Expenses:Property-Expenses:Depreciation 136.27 CNY 2020-06-30 * \"Example-auto_depreciation:Nikon\" Assets:Wealth:Fixed-Assets -1 LENS {243.47 CNY, 2020-05-31, \"Nikon\"} Assets:Wealth:Fixed-Assets 1 LENS {200 CNY, 2020-06-30, \"Nikon\"} Expenses:Property-Expenses:Depreciation 43.47 CNY If the amount of fixed assets is greater than 1, all will be depreciated like this: Example 2020-03-31 * \"Example\" Assets:Cash -1200.00 CNY Assets:Wealth:Fixed-Assets 2 LENS {600.00 CNY, 2020-03-31, \"Nikon\"} useful_life: \"3m\" residual_value: 200 2020-04-30 * \"Example-auto_depreciation:Nikon\" Assets:Wealth:Fixed-Assets -2 LENS {600.00 CNY, 2020-03-31, \"Nikon\"} Assets:Wealth:Fixed-Assets 2 LENS {379.74 CNY, 2020-04-30, \"Nikon\"} Expenses:Property-Expenses:Depreciation 440.52 CNY ...","title":"Usage"},{"location":"CONTRIBUTING/","text":"Contributing \u00b6 Introduction \u00b6 Thanks for considering contributing to this project. Please follow these guidelines to develop in order to guarantee the code quality and save time for other developers. Ground rules \u00b6 Ensure the cross-platform compatibility of latest Windows and Ubuntu. Please use poetry as the dependencies management tool. Please follow Conventional commits for your commits message. Please follow gitflow branch strategy. Get started \u00b6 Fork and create a new branch \u00b6 Fork this project before your contributing. We recommend to use git-flow and initialize: git config gitflow.branch.master main git config gitflow.prefix.versiontag v git flow init -d If you want to fix bugs: git flow bugfix start <branch_name> or git checkout develop git branch -b bugfix/<branch_name> If you want to add new features, refactor codes: git flow feature start <branch_name> or git checkout develop git branch -b feature/<branch_name> Branch name should only contains alphabets, digits, and - . Corresponding issue number should be included if applicable. Install dependencies \u00b6 Now you are in a new branch for developing. Install dependencies and pre-commit hooks: poetry install -E test pre-commit install -t pre-commit -t commit-msg Recommend to use commitizen to submit commits\u3002 Test your code \u00b6 Before your pull request, please test your code: pytest If you add new features, remember to add corresponding tests. Make a pull request \u00b6 If the upstream is updated, please rebase to track the update of develop branch: git checkout develop git pull --rebase upstream develop git flow bugfix rebase <branch_name> or git checkout develop git pull --rebase upstream develop git checkout <branch_name> git rebase develop Finally, make a pull request against develop branch . How to report a bug \u00b6 If you find bugs of documentation or code, please submit a bug report in GitHub. How to suggest a feature or enhancement \u00b6 Open an issue in GitHub if you have any suggestions of this project.","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"","title":"Contributing"},{"location":"CONTRIBUTING/#introduction","text":"Thanks for considering contributing to this project. Please follow these guidelines to develop in order to guarantee the code quality and save time for other developers.","title":"Introduction"},{"location":"CONTRIBUTING/#ground-rules","text":"Ensure the cross-platform compatibility of latest Windows and Ubuntu. Please use poetry as the dependencies management tool. Please follow Conventional commits for your commits message. Please follow gitflow branch strategy.","title":"Ground rules"},{"location":"CONTRIBUTING/#get-started","text":"","title":"Get started"},{"location":"CONTRIBUTING/#fork-and-create-a-new-branch","text":"Fork this project before your contributing. We recommend to use git-flow and initialize: git config gitflow.branch.master main git config gitflow.prefix.versiontag v git flow init -d If you want to fix bugs: git flow bugfix start <branch_name> or git checkout develop git branch -b bugfix/<branch_name> If you want to add new features, refactor codes: git flow feature start <branch_name> or git checkout develop git branch -b feature/<branch_name> Branch name should only contains alphabets, digits, and - . Corresponding issue number should be included if applicable.","title":"Fork and create a new branch"},{"location":"CONTRIBUTING/#install-dependencies","text":"Now you are in a new branch for developing. Install dependencies and pre-commit hooks: poetry install -E test pre-commit install -t pre-commit -t commit-msg Recommend to use commitizen to submit commits\u3002","title":"Install dependencies"},{"location":"CONTRIBUTING/#test-your-code","text":"Before your pull request, please test your code: pytest If you add new features, remember to add corresponding tests.","title":"Test your code"},{"location":"CONTRIBUTING/#make-a-pull-request","text":"If the upstream is updated, please rebase to track the update of develop branch: git checkout develop git pull --rebase upstream develop git flow bugfix rebase <branch_name> or git checkout develop git pull --rebase upstream develop git checkout <branch_name> git rebase develop Finally, make a pull request against develop branch .","title":"Make a pull request"},{"location":"CONTRIBUTING/#how-to-report-a-bug","text":"If you find bugs of documentation or code, please submit a bug report in GitHub.","title":"How to report a bug"},{"location":"CONTRIBUTING/#how-to-suggest-a-feature-or-enhancement","text":"Open an issue in GitHub if you have any suggestions of this project.","title":"How to suggest a feature or enhancement"},{"location":"methods/","text":"Depreciation Method \u00b6 Introduction \u00b6 Many depreciation methods are used in accounting. For example, Straight-line, sum-of-years-digit, Diminishing balance method, etc. Gernerally, the basic depreciation period in accounting is month. That means depreciation expenses of every month are identical if we use straight-line method. However, in this plugin, the basic depreciation period is day and depreciation transactions are generated monthly. That means day is the implicit period when calculating present value, while month is the explicit period to generate transactions. Linear \u00b6 Linear method is the same with straight-line method. The present value of assets vs elapsed days is like this: \\[ y=-\\frac{p-q}{n}x+p \\] where \\(y\\) is the present value, \\(p\\) is the original value, \\(q\\) is the residual value, \\(n\\) is the useful life in days and \\(x\\) is the elapsed time in days. Present value divided by original value of linear method Note 2020-03-31 * \"\" Assets:Cash -600.00 CNY Assets:Wealth:Fixed-Assets 1 LENS {600.00 CNY, 2020-03-31, \"Nikon\"} useful_life: \"3m\" residual_value: 200 The syntax above equals 2020-03-31 * \"\" Assets:Cash -600.00 CNY Assets:Wealth:Fixed-Assets 1 LENS {600.00 CNY, 2020-03-31, \"Nikon\"} useful_life: \"3m\" residual_value: 200 2020-04-30 * \"auto_depreciation:Nikon\" Assets:Wealth:Fixed-Assets -1 LENS {600.00 CNY, 2020-03-31, \"Nikon\"} Assets:Wealth:Fixed-Assets 1 LENS {468.13 CNY, 2020-04-30, \"Nikon\"} Expenses:Property-Expenses:Depreciation 131.87 CNY 2020-05-31 * \"auto_depreciation:Nikon\" Assets:Wealth:Fixed-Assets -1 LENS {468.13 CNY, 2020-04-30, \"Nikon\"} Assets:Wealth:Fixed-Assets 1 LENS {331.87 CNY, 2020-05-31, \"Nikon\"} Expenses:Property-Expenses:Depreciation 136.26 CNY 2020-06-30 * \"auto_depreciation:Nikon\" Assets:Wealth:Fixed-Assets -1 LENS {331.87 CNY, 2020-05-31, \"Nikon\"} Assets:Wealth:Fixed-Assets 1 LENS {200 CNY, 2020-06-30, \"Nikon\"} Expenses:Property-Expenses:Depreciation 131.87 CNY Here we can see, the depreciation expenses in May is a little bit greater than that in April and June. That's because the present value is a function of useful life in days instead of in months. Parabola \u00b6 Parabola method is the default method and it is the continuous form of sum-of-years-digit method. The depreciation rate in sum-of-years-digit method decrease linearly. Therefore, in the continuous form, the present value curve should be a parabola. \\[ y=\\frac{p-q}{n^2}(x-n)^2+q \\] Present value divided by original value of parabola method","title":"Depreciation Methods"},{"location":"methods/#depreciation-method","text":"","title":"Depreciation Method"},{"location":"methods/#introduction","text":"Many depreciation methods are used in accounting. For example, Straight-line, sum-of-years-digit, Diminishing balance method, etc. Gernerally, the basic depreciation period in accounting is month. That means depreciation expenses of every month are identical if we use straight-line method. However, in this plugin, the basic depreciation period is day and depreciation transactions are generated monthly. That means day is the implicit period when calculating present value, while month is the explicit period to generate transactions.","title":"Introduction"},{"location":"methods/#linear","text":"Linear method is the same with straight-line method. The present value of assets vs elapsed days is like this: \\[ y=-\\frac{p-q}{n}x+p \\] where \\(y\\) is the present value, \\(p\\) is the original value, \\(q\\) is the residual value, \\(n\\) is the useful life in days and \\(x\\) is the elapsed time in days. Present value divided by original value of linear method Note 2020-03-31 * \"\" Assets:Cash -600.00 CNY Assets:Wealth:Fixed-Assets 1 LENS {600.00 CNY, 2020-03-31, \"Nikon\"} useful_life: \"3m\" residual_value: 200 The syntax above equals 2020-03-31 * \"\" Assets:Cash -600.00 CNY Assets:Wealth:Fixed-Assets 1 LENS {600.00 CNY, 2020-03-31, \"Nikon\"} useful_life: \"3m\" residual_value: 200 2020-04-30 * \"auto_depreciation:Nikon\" Assets:Wealth:Fixed-Assets -1 LENS {600.00 CNY, 2020-03-31, \"Nikon\"} Assets:Wealth:Fixed-Assets 1 LENS {468.13 CNY, 2020-04-30, \"Nikon\"} Expenses:Property-Expenses:Depreciation 131.87 CNY 2020-05-31 * \"auto_depreciation:Nikon\" Assets:Wealth:Fixed-Assets -1 LENS {468.13 CNY, 2020-04-30, \"Nikon\"} Assets:Wealth:Fixed-Assets 1 LENS {331.87 CNY, 2020-05-31, \"Nikon\"} Expenses:Property-Expenses:Depreciation 136.26 CNY 2020-06-30 * \"auto_depreciation:Nikon\" Assets:Wealth:Fixed-Assets -1 LENS {331.87 CNY, 2020-05-31, \"Nikon\"} Assets:Wealth:Fixed-Assets 1 LENS {200 CNY, 2020-06-30, \"Nikon\"} Expenses:Property-Expenses:Depreciation 131.87 CNY Here we can see, the depreciation expenses in May is a little bit greater than that in April and June. That's because the present value is a function of useful life in days instead of in months.","title":"Linear"},{"location":"methods/#parabola","text":"Parabola method is the default method and it is the continuous form of sum-of-years-digit method. The depreciation rate in sum-of-years-digit method decrease linearly. Therefore, in the continuous form, the present value curve should be a parabola. \\[ y=\\frac{p-q}{n^2}(x-n)^2+q \\] Present value divided by original value of parabola method","title":"Parabola"}]}